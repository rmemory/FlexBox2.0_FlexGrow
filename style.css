/* CSS Normalize */
article,aside,details,figcaption,figure,footer,header,hgroup,nav,section,summary{display:block;}audio,canvas,video{display:inline-block;}audio:not([controls]){display:none;height:0;}[hidden]{display:none;}html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;}a:focus{outline:thin dotted;}a:active,a:hover{outline:0;}h1{font-size:2em;}abbr[title]{border-bottom:1px dotted;}b,strong{font-weight:700;}dfn{font-style:italic;}mark{background:#ff0;color:#000;}code,kbd,pre,samp{font-family:monospace, serif;font-size:1em;}pre{white-space:pre-wrap;word-wrap:break-word;}q{quotes:\201C \201D \2018 \2019;}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sup{top:-.5em;}sub{bottom:-.25em;}img{border:0;}svg:not(:root){overflow:hidden;}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em;}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0;}button,input{line-height:normal;}button,html input[type=button],/* 1 */
input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer;}button[disabled],input[disabled]{cursor:default;}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0;}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none;}textarea{overflow:auto;vertical-align:top;}table{border-collapse:collapse;border-spacing:0;}body,figure{margin:0;}legend,button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}

/* Box-sizing border-box */
* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }


/* Some default styles to make each box visible */
.box {
  color:white;
  font-size: 50px;
  text-align: center;
  text-shadow:4px 4px 0 rgba(0,0,0,0.1);
  padding:10px;
}

/* Colours for each box */
.box1 { background:#1abc9c;}
.box2 { background:#3498db;}
.box3 { background:#9b59b6;}
.box4 { background:#34495e;}
.box5 { background:#f1c40f;}
.box6 { background:#e67e22;}
.box7 { background:#e74c3c;}
.box8 { background:#bdc3c7;}
.box9 { background:#2ecc71;}
.box10 { background:#16a085;}


/* We start writing out flexbox here. The above is just page setup */
.container {
  display:flex;
  flex-wrap: wrap;
}

/*
 * The flex grow property says, when you have too much extra space
 * how much space should it take. If all of the items have a flex
 * grow of 1, then they all take the same space.
 *
 * flex grow and flex shrink are all about how the "extra space"
 * or lack thereof is allocated. In this example, both boxes 
 * have a flex basis (default size) of 400 + 400 = 800. The flex
 * grow and flex shrink control how these elements act relative
 * to each other when there is either more or less than 800.
 *
 * Flex shrink is kind of the opposite, in that it says when we 
 * don't have enough space, how much am i willing to shrink. 
 * Higher values say I don't want to shrink if possible.
 *
 * flex basis says, before we do any growing or shrinking, how much
 * space would I like in this item.
 * 
 * Defaults for flex grow and flex shrink are 0.
 */
.box1 {
  flex:10 5 400px;
}

/* Because box1 has a flex grow larger than box2 (10x larger) that
   means it get 10x the extra room (of the space more than 800). 
   
   However, when there is not enough space, box1 will shrink more 
   (5x) than box2 because it has a higher flex shrink. */
.box2 {
  flex:1 1 400px;
}

